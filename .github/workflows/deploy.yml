name: Deploy Windows Microservice

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Restore Dependencies
        run: dotnet restore src/Microservice.sln

      - name: Build
        run: dotnet build src/Microservice.sln --configuration Release

      - name: Publish
        run: dotnet publish src/Microservice/Microservice.csproj -c Release -o ./publish

      - name: Zip the Windows Microservice
        run: | 
          powershell Compress-Archive -Path ./publish/* -DestinationPath ./windows-microservice.zip
      - name: Upload ZIP to S3
        run: aws s3 cp ./windows-microservice.zip s3://alok-swimlaneartifacts/
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  terraform:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Terraform Init
        run: terraform init
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
  ASG_Rotation:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Doube ASG count
        run: |
          Current_Desired_count=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names SB1-batch --query "AutoScalingGroups[0].DesiredCapacity")

          New_Desired_count=$(( Current_Desired_count * 2 ))

          aws autoscaling update-auto-scaling-group --auto-scaling-group-name SB1-batch --min-size $New_Desired_count --max-size $New_Desired_count

          sleep 120
      - name: Decrease ASG count
        run: |
          New_count=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names SB1-batch --query "AutoScalingGroups[0].DesiredCapacity")

          Rotate_Instance=$(( New_count / 2 ))

          aws autoscaling update-auto-scaling-group --auto-scaling-group-name SB1-batch --min-size $New_count --max-size $New_count
